name: CI

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, reopened]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Generate required .env file
        run: |
          echo DEBUG=True >> .env
          echo FLASK_DEBUG=1 >> .env
          echo FLASK_APP=run.py >> .env

      - name: Building containers
        run: docker-compose build

      - name: Run tests
        run: docker-compose up unit-test-container

  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Generate required .env file
        run: |
          echo DEBUG=True >> .env
          echo FLASK_DEBUG=1 >> .env
          echo FLASK_APP=run.py >> .env

      - name: Building containers
        run: docker-compose build

      - name: Run tests
        run: docker-compose up unit-test-container

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: -Dsonar.projectKey=your_project_key -Dsonar.organization=your_organization_key
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  merge:
    runs-on: ubuntu-latest
    needs: [build, pylint, sonarcloud]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all branches are fetched

      - name: Set up Git config
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Debug branch names
        run: |
          git branch -a
          git status

      - name: Checkout dev branch
        run: |
          git checkout dev
          git pull origin dev  # Ensure the latest changes are pulled

      - name: Checkout master branch
        run: |
          git checkout master
          git pull origin master  # Ensure the latest changes are pulled

      - name: Merge to dev branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout dev  # Make sure the dev branch exists
          git merge master --no-ff -m "Merging master into dev"
          git push origin dev

