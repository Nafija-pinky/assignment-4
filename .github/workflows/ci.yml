name: CI Pipeline

on: 
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, reopened]

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint ./FLASK_STARTERKIT --output-format=text > pylint-report.txt

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install pytest coverage
        pip install -r requirements.txt
    - name: Set PYTHONPATH
      run: |
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
    - name: Run Unit Tests
      run: |
        pytest --junitxml=pytest-report.xml --cov=./ --cov-report=xml:coverage.xml

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Java (required for SonarCloud)
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    - name: Cache SonarCloud dependencies
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
    - name: Install dependencies for analysis
      run: |
        pip install pylint pytest pytest-cov
    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      with:
        projectBaseDir: .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install docker-compose
    - name: Generate required .env file
      run: |
        echo DEBUG=True >> .env
        echo FLASK_DEBUG=1 >> .env
        echo FLASK_APP=run.py >> .env
    - name: Building containers
      run: docker-compose build
    - name: Run tests
      run: docker-compose up unit-test-container
